/*1. function to generate a 4 digit number (completed with func)
2. function to read a 4 digit number and return As and Bs
3. function to guess numbers
4. extend functions to work with more than four digits
5. conditions: do numbers start with 0? can numbers be repetitive */
#include "main.h"

std::list<int> sample = {};

void parcel(int* arrptr, int number){
    for(int i = digits - 1; i >= 0; --i){
        *(arrptr + i) = number % 10;
        number/=10;
    }
}


string read_number(int user_guess){ //by default digits is 4
    int guess_arr[digits], computer_number_arr[digits], As = 0, Bs = 0;
     /*for(int i = digits - 1; i >= 0; --i){
        guess_arr[i] = user_guess % 10;
        computer_number_arr[i] =  computer_number % 10;
        computer_number/= 10;
        user_guess/= 10;
    } */
    parcel(guess_arr, user_guess);
    parcel(computer_number_arr, computer_number);
    for(int i = 0; i < digits; ++i){
        for(int j = 0; j < digits; ++j){
            if(i == j && guess_arr[i] == computer_number_arr[j]) As++;
            else if(i != j && guess_arr[i] == computer_number_arr[j]) Bs++;
        }
    }
    return std::to_string(As) + "A" + std::to_string(Bs) + "B";
}



int algorithm1(string response, int prev_guess){
    //sample includes all possibilities
    int guessarr[digits], samplearr[digits];
    parcel(guessarr, prev_guess);
    //int A = response[0] - '0', B = response[2] - '0';
    int A, B;
    response[0] == '0' ? A = 0 : A = response[0] - '0';
    response[2] == '0' ? B = 0 : B = response[2] - '0';
    if(response == " " && prev_guess == 0) return 1234;
    else if(B >= 0){
        B += A;
        for(auto ite = sample.begin(); ite != sample.end(); ite++){
            if(ite == sample.end()) cout << "out of bounds!" << endl;
            int countA = 0, countB = 0;
            parcel(samplearr, *ite);

            for(int i = 0; i < digits; i++){
                if(samplearr[i] == guessarr[i]) countA++; //count A as for digits that are at the identical position
                for(int j = 0; j < digits; j++){
                    if(samplearr[i] == guessarr[j]) countB++;    //count as for digits that repeat   
                }
                    
            }
            //cout << "for " << *ite << "countA is: " << countA << endl;
            if(countB < B || countA < A){
                sample.erase(ite);
                cout << *ite << " Number is erased! countA and B is " << countA << " " << countB << endl;
            }//else if(B == 0 && countB > 0 && A == 0) sample.erase(ite);
            //else if(countA != A) sample.erase(ite);
        }
    }
    

    auto new_guess = sample.begin();
    std::ranges::advance(new_guess, rand() % sample.size());
    sample.erase(new_guess);
    if(new_guess == sample.end()) cout << "new guess out of bounds!" << endl;
    return *new_guess;
}
/*for(auto ite = sample.begin(); ite != sample.end(); ite++){
        int count = 0;
        parcel(samplearr, *ite);
        for(int i = 0; i < digits; ++i){
            if(samplearr[i] ==  guessarr[i]) count++; //digits that are exactly at the same position
        }
        cout << count << endl;
        if(count == A){
            //sample.erase(ite);
            cout <<  *ite << endl;
        }
    } */
    //cout << "samples that remain(1): " <<  sample.size() << endl;

    //for(auto value : sample) cout << value << " ";
    //if(sample.size() ==  0) return -1;

